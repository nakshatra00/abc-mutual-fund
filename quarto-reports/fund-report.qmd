---
title: "Individual Fund - Portfolio Analysis"
subtitle: "Detailed Holdings and Risk Analysis"
date: today
execute:
  echo: false
  warning: false
  message: false
jupyter: python3
---

```{python}
#| echo: false
#| warning: false
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# Set up plotting style
plt.style.use('seaborn-v0_8')
sns.set_palette("Set2")

# Parameters from environment or defaults
import os
amc_name = os.getenv('QUARTO_AMC_NAME', 'HDFC')
report_date = os.getenv('QUARTO_REPORT_DATE', '2025-07-31')

# Map AMC names to fund names
amc_fund_map = {
    'ABSLF': 'Aditya Birla Sun Life Corporate Bond Fund',
    'HDFC': 'HDFC Corporate Bond Fund', 
    'ICICI': 'ICICI Prudential Corporate Bond Fund',
    'KOTAK': 'Kotak Corporate Bond Fund',
    'NIPPON': 'Nippon India Corporate Bond Fund',
    'SBI': 'SBI Corporate Bond Fund'
}

fund_name = amc_fund_map.get(amc_name, f'{amc_name} Corporate Bond Fund')

# Load the fund-specific data from individual extracts
base_path = Path("/Users/nakshatragupta/Documents/Coding/abc-mutual-fund")
data_file = f"{amc_name}_verified.csv"
fund_data_path = base_path / "output" / report_date / "individual_extracts" / data_file

try:
    fund_data = pd.read_csv(fund_data_path)
    data_available = True
    print(f"{fund_name} ({amc_name}) - Portfolio Analysis")
    print(f"Report Date: {report_date}")
    print("="*80)
except FileNotFoundError:
    print(f"Warning: Data file {data_file} not found")
    data_available = False
    fund_data = pd.DataFrame()
```

# Fund Overview

```{python}
#| echo: false

if data_available:
    # Calculate key metrics
    total_holdings = len(fund_data)
    total_aum = fund_data['Market_Value_Cr'].sum() if 'Market_Value_Cr' in fund_data.columns else 0
    avg_yield = fund_data['Yield'].mean() if 'Yield' in fund_data.columns else 0
    
    # Rating distribution
    if 'Standardized_Rating' in fund_data.columns:
        rating_counts = fund_data['Standardized_Rating'].value_counts()
        top_rating = rating_counts.index[0] if len(rating_counts) > 0 else "N/A"
        rating_diversity = len(rating_counts)
    else:
        top_rating = "N/A"
        rating_diversity = 0
    
    print(f"**Fund Characteristics:**")
    print(f"• **Total Holdings:** {total_holdings:,} securities")
    print(f"• **Portfolio Size:** ₹{total_aum:,.0f} crores")
    print(f"• **Average Yield:** {avg_yield:.2f}%")
    print(f"• **Primary Rating:** {top_rating}")
    print(f"• **Rating Diversity:** {rating_diversity} different rating categories")
    
else:
    print("Fund data not available for analysis")
```

```{python}
#| echo: false
#| fig-width: 10
#| fig-height: 3

if data_available and total_aum > 0:
    # Create KPI visualization
    fig, axes = plt.subplots(1, 4, figsize=(12, 3))
    fig.suptitle(f'{fund_name} - Key Metrics', fontsize=14, fontweight='bold')
    
    # KPI 1: Total AUM
    axes[0].text(0.5, 0.6, f"₹{total_aum:,.0f}", ha='center', va='center', 
                 fontsize=16, fontweight='bold', color='#1f4e79')
    axes[0].text(0.5, 0.3, "Portfolio Size\n(₹ Crores)", ha='center', va='center', 
                 fontsize=9, color='#666')
    axes[0].set_xlim(0, 1)
    axes[0].set_ylim(0, 1)
    axes[0].axis('off')
    
    # KPI 2: Average Yield
    axes[1].text(0.5, 0.6, f"{avg_yield:.2f}%", ha='center', va='center', 
                 fontsize=16, fontweight='bold', color='#2f7d7d')
    axes[1].text(0.5, 0.3, "Average\nYield", ha='center', va='center', 
                 fontsize=9, color='#666')
    axes[1].set_xlim(0, 1)
    axes[1].set_ylim(0, 1)
    axes[1].axis('off')
    
    # KPI 3: Holdings Count
    axes[2].text(0.5, 0.6, f"{total_holdings}", ha='center', va='center', 
                 fontsize=16, fontweight='bold', color='#4f7d4f')
    axes[2].text(0.5, 0.3, "Total\nHoldings", ha='center', va='center', 
                 fontsize=9, color='#666')
    axes[2].set_xlim(0, 1)
    axes[2].set_ylim(0, 1)
    axes[2].axis('off')
    
    # KPI 4: Rating Diversity
    axes[3].text(0.5, 0.6, f"{rating_diversity}", ha='center', va='center', 
                 fontsize=16, fontweight='bold', color='#df8f2f')
    axes[3].text(0.5, 0.3, "Rating\nCategories", ha='center', va='center', 
                 fontsize=9, color='#666')
    axes[3].set_xlim(0, 1)
    axes[3].set_ylim(0, 1)
    axes[3].axis('off')
    
    plt.tight_layout()
    plt.show()
```

# Portfolio Composition

## Holdings Summary

```{python}
#| echo: false
#| label: tbl-holdings-summary
#| tbl-cap: "Portfolio Holdings Summary"

if data_available and len(fund_data) > 0:
    # Create summary statistics
    summary_stats = pd.DataFrame({
        'Metric': ['Total Holdings', 'Total Market Value (₹ Cr)', 'Average Holding Size (₹ Cr)', 
                   'Largest Holding (₹ Cr)', 'Smallest Holding (₹ Cr)', 'Median Holding (₹ Cr)'],
        'Value': [
            f"{len(fund_data):,}",
            f"₹{fund_data['Market_Value_Cr'].sum():,.0f}",
            f"₹{fund_data['Market_Value_Cr'].mean():.2f}",
            f"₹{fund_data['Market_Value_Cr'].max():.2f}",
            f"₹{fund_data['Market_Value_Cr'].min():.2f}",
            f"₹{fund_data['Market_Value_Cr'].median():.2f}"
        ]
    })
    
    print(summary_stats.to_string(index=False))
else:
    print("Holdings summary not available")
```

## Top 15 Holdings

```{python}
#| echo: false
#| label: tbl-top-holdings
#| tbl-cap: "Top 15 Holdings by Market Value"

if data_available and len(fund_data) > 0:
    # Get top 15 holdings
    top_holdings = fund_data.nlargest(15, 'Market_Value_Cr').copy()
    
    # Calculate percentage of portfolio
    total_portfolio = fund_data['Market_Value_Cr'].sum()
    top_holdings['Portfolio_Pct'] = (top_holdings['Market_Value_Cr'] / total_portfolio * 100)
    
    # Format for display
    display_cols = ['Issuer_Name', 'Market_Value_Cr', 'Portfolio_Pct', 'Yield', 'Standardized_Rating']
    available_cols = [col for col in display_cols if col in top_holdings.columns]
    
    holdings_display = top_holdings[available_cols].copy()
    
    if 'Market_Value_Cr' in holdings_display.columns:
        holdings_display['Market_Value_Cr'] = holdings_display['Market_Value_Cr'].apply(lambda x: f"₹{x:.2f}")
    if 'Portfolio_Pct' in holdings_display.columns:
        holdings_display['Portfolio_Pct'] = holdings_display['Portfolio_Pct'].apply(lambda x: f"{x:.2f}%")
    if 'Yield' in holdings_display.columns:
        holdings_display['Yield'] = holdings_display['Yield'].apply(lambda x: f"{x:.2f}%" if pd.notna(x) else "N/A")
    
    # Rename columns for display
    column_names = {
        'Issuer_Name': 'Issuer Name',
        'Market_Value_Cr': 'Market Value (₹ Cr)',
        'Portfolio_Pct': 'Portfolio %',
        'Yield': 'Yield %',
        'Standardized_Rating': 'Rating'
    }
    holdings_display = holdings_display.rename(columns=column_names)
    
    print(holdings_display.to_string(index=False))
else:
    print("Top holdings data not available")
```

# Credit Quality Analysis

## Rating Distribution

```{python}
#| echo: false
#| label: tbl-rating-breakdown
#| tbl-cap: "Portfolio by Credit Rating"

if data_available and 'Standardized_Rating' in fund_data.columns:
    # Calculate rating distribution
    rating_analysis = fund_data.groupby('Standardized_Rating').agg({
        'Market_Value_Cr': ['sum', 'count'],
        'Yield': 'mean'
    }).round(2)
    
    rating_analysis.columns = ['Total_Amount', 'Holdings_Count', 'Avg_Yield']
    rating_analysis = rating_analysis.reset_index()
    
    # Calculate percentages
    total_amount = rating_analysis['Total_Amount'].sum()
    rating_analysis['Percentage'] = (rating_analysis['Total_Amount'] / total_amount * 100).round(2)
    
    # Sort by amount descending
    rating_analysis = rating_analysis.sort_values('Total_Amount', ascending=False)
    
    # Format for display
    rating_display = rating_analysis.copy()
    rating_display['Total_Amount'] = rating_display['Total_Amount'].apply(lambda x: f"₹{x:,.0f}")
    rating_display['Percentage'] = rating_display['Percentage'].apply(lambda x: f"{x:.1f}%")
    rating_display['Avg_Yield'] = rating_display['Avg_Yield'].apply(lambda x: f"{x:.2f}%" if pd.notna(x) else "N/A")
    
    rating_display.columns = ['Rating', 'Amount (₹ Cr)', 'Percentage', 'Holdings', 'Avg Yield']
    print(rating_display.to_string(index=False))
else:
    print("Rating distribution not available")
```

```{python}
#| echo: false
#| fig-width: 12
#| fig-height: 8
#| label: fig-rating-analysis
#| fig-cap: "Credit Quality Distribution"

if data_available and 'Standardized_Rating' in fund_data.columns and len(rating_analysis) > 0:
    # Create rating analysis charts
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(14, 10))
    
    # Define rating colors
    rating_colors = {
        'SOVEREIGN': '#1f4e79', 'AAA': '#2f5f8f', 'AA+': '#3f6f9f', 'AA': '#3f6f9f', 'AA-': '#3f6f9f',
        'A+': '#4f7f4f', 'A': '#4f7f4f', 'A-': '#4f7f4f', 'BBB+': '#df8f2f', 'BBB': '#df8f2f', 
        'BBB-': '#df8f2f', 'OTHER': '#8f8f8f'
    }
    
    colors = [rating_colors.get(rating, '#8f8f8f') for rating in rating_analysis['Standardized_Rating']]
    
    # 1. Pie chart - Rating distribution by value
    wedges, texts, autotexts = ax1.pie(rating_analysis['Percentage'], 
                                       labels=rating_analysis['Standardized_Rating'],
                                       autopct='%1.1f%%',
                                       colors=colors,
                                       startangle=90)
    ax1.set_title('Portfolio Distribution by Rating', fontsize=12, fontweight='bold')
    
    # 2. Bar chart - Rating distribution
    bars = ax2.bar(rating_analysis['Standardized_Rating'], rating_analysis['Percentage'], 
                   color=colors)
    ax2.set_xlabel('Credit Rating')
    ax2.set_ylabel('Portfolio Percentage (%)')
    ax2.set_title('Rating Allocation Breakdown', fontsize=12, fontweight='bold')
    ax2.tick_params(axis='x', rotation=45)
    
    # Add value labels
    for bar, value in zip(bars, rating_analysis['Percentage']):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                 f'{value:.1f}%', ha='center', va='bottom', fontweight='bold', fontsize=9)
    
    # 3. Holdings count by rating
    ax3.bar(rating_analysis['Standardized_Rating'], rating_analysis['Holdings_Count'], 
            color=colors, alpha=0.7)
    ax3.set_xlabel('Credit Rating')
    ax3.set_ylabel('Number of Holdings')
    ax3.set_title('Holdings Count by Rating', fontsize=12, fontweight='bold')
    ax3.tick_params(axis='x', rotation=45)
    
    # 4. Average yield by rating
    valid_yields = rating_analysis.dropna(subset=['Avg_Yield'])
    if len(valid_yields) > 0:
        colors_yield = [rating_colors.get(rating, '#8f8f8f') for rating in valid_yields['Standardized_Rating']]
        bars4 = ax4.bar(valid_yields['Standardized_Rating'], valid_yields['Avg_Yield'], 
                        color=colors_yield, alpha=0.7)
        ax4.set_xlabel('Credit Rating')
        ax4.set_ylabel('Average Yield (%)')
        ax4.set_title('Average Yield by Rating', fontsize=12, fontweight='bold')
        ax4.tick_params(axis='x', rotation=45)
        
        # Add value labels
        for bar, value in zip(bars4, valid_yields['Avg_Yield']):
            height = bar.get_height()
            ax4.text(bar.get_x() + bar.get_width()/2., height + 0.05,
                     f'{value:.2f}%', ha='center', va='bottom', fontweight='bold', fontsize=9)
    
    plt.tight_layout()
    plt.show()
else:
    print("Rating analysis charts not available")
```

# Issuer Analysis

## Top Issuer Concentration

```{python}
#| echo: false
#| label: tbl-top-issuers
#| tbl-cap: "Top 10 Issuers by Exposure"

if data_available and 'Issuer_Name' in fund_data.columns:
    # Issuer concentration analysis
    issuer_analysis = fund_data.groupby('Issuer_Name').agg({
        'Market_Value_Cr': ['sum', 'count'],
        'Yield': 'mean'
    }).round(2)
    
    issuer_analysis.columns = ['Total_Exposure', 'Holdings_Count', 'Avg_Yield']
    issuer_analysis = issuer_analysis.reset_index()
    
    # Calculate percentage of portfolio
    total_portfolio = issuer_analysis['Total_Exposure'].sum()
    issuer_analysis['Portfolio_Pct'] = (issuer_analysis['Total_Exposure'] / total_portfolio * 100).round(2)
    
    # Sort by exposure and get top 10
    top_issuers = issuer_analysis.sort_values('Total_Exposure', ascending=False).head(10)
    
    # Format for display
    issuers_display = top_issuers.copy()
    issuers_display['Total_Exposure'] = issuers_display['Total_Exposure'].apply(lambda x: f"₹{x:,.2f}")
    issuers_display['Portfolio_Pct'] = issuers_display['Portfolio_Pct'].apply(lambda x: f"{x:.2f}%")
    issuers_display['Avg_Yield'] = issuers_display['Avg_Yield'].apply(lambda x: f"{x:.2f}%" if pd.notna(x) else "N/A")
    
    issuers_display.columns = ['Issuer Name', 'Total Exposure (₹ Cr)', 'Portfolio %', 'Holdings', 'Avg Yield']
    print(issuers_display.to_string(index=False))
else:
    print("Issuer analysis not available")
```

```{python}
#| echo: false
#| fig-width: 12
#| fig-height: 8
#| label: fig-issuer-concentration
#| fig-cap: "Issuer Concentration Analysis"

if data_available and 'Issuer_Name' in fund_data.columns and len(issuer_analysis) > 0:
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
    
    # Top 10 issuers horizontal bar chart
    top_10_issuers = issuer_analysis.sort_values('Total_Exposure', ascending=False).head(10)
    bars = ax1.barh(range(len(top_10_issuers)), top_10_issuers['Total_Exposure'])
    ax1.set_yticks(range(len(top_10_issuers)))
    ax1.set_yticklabels(top_10_issuers['Issuer_Name'], fontsize=10)
    ax1.set_xlabel('Total Exposure (₹ Crores)')
    ax1.set_title('Top 10 Issuers by Total Exposure', fontsize=12, fontweight='bold')
    ax1.invert_yaxis()
    
    # Add value labels
    for i, (bar, value, pct) in enumerate(zip(bars, top_10_issuers['Total_Exposure'], top_10_issuers['Portfolio_Pct'])):
        width = bar.get_width()
        ax1.text(width + (width * 0.02), bar.get_y() + bar.get_height()/2,
                 f'₹{value:.1f} ({pct:.1f}%)', ha='left', va='center', fontweight='bold', fontsize=9)
    
    # Concentration curve
    issuer_sorted = issuer_analysis.sort_values('Total_Exposure', ascending=False)
    cumulative_pct = issuer_sorted['Portfolio_Pct'].cumsum()
    
    ax2.plot(range(1, len(cumulative_pct) + 1), cumulative_pct, 'b-', linewidth=2, label='Cumulative Exposure')
    ax2.axhline(y=50, color='r', linestyle='--', alpha=0.7, label='50% Threshold')
    ax2.axhline(y=75, color='orange', linestyle='--', alpha=0.7, label='75% Threshold')
    ax2.set_xlabel('Number of Issuers (Ranked by Exposure)')
    ax2.set_ylabel('Cumulative Percentage of Portfolio')
    ax2.set_title('Issuer Concentration Curve', fontsize=12, fontweight='bold')
    ax2.grid(True, alpha=0.3)
    ax2.legend()
    
    # Add key annotations
    if len(cumulative_pct) >= 5:
        top_5_cumulative = cumulative_pct.head(5).iloc[-1]
        ax2.annotate(f'Top 5: {top_5_cumulative:.1f}%', 
                     xy=(5, top_5_cumulative), xytext=(8, top_5_cumulative-3),
                     arrowprops=dict(arrowstyle='->', color='blue', alpha=0.7),
                     fontweight='bold')
    
    if len(cumulative_pct) >= 10:
        top_10_cumulative = cumulative_pct.head(10).iloc[-1]
        ax2.annotate(f'Top 10: {top_10_cumulative:.1f}%', 
                     xy=(10, top_10_cumulative), xytext=(13, top_10_cumulative-3),
                     arrowprops=dict(arrowstyle='->', color='blue', alpha=0.7),
                     fontweight='bold')
    
    plt.tight_layout()
    plt.show()
else:
    print("Issuer concentration charts not available")
```

# Yield Analysis

## Yield Distribution

```{python}
#| echo: false
#| fig-width: 12
#| fig-height: 6
#| label: fig-yield-analysis
#| fig-cap: "Yield Distribution Analysis"

if data_available and 'Yield' in fund_data.columns:
    # Remove NaN values for yield analysis
    yield_data = fund_data.dropna(subset=['Yield'])
    
    if len(yield_data) > 0:
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))
        
        # Yield histogram
        ax1.hist(yield_data['Yield'], bins=20, alpha=0.7, color='skyblue', edgecolor='black')
        ax1.set_xlabel('Yield (%)')
        ax1.set_ylabel('Number of Holdings')
        ax1.set_title('Yield Distribution', fontsize=12, fontweight='bold')
        ax1.axvline(yield_data['Yield'].mean(), color='red', linestyle='--', 
                   label=f'Mean: {yield_data["Yield"].mean():.2f}%')
        ax1.axvline(yield_data['Yield'].median(), color='orange', linestyle='--', 
                   label=f'Median: {yield_data["Yield"].median():.2f}%')
        ax1.legend()
        
        # Yield vs Market Value scatter
        ax2.scatter(yield_data['Yield'], yield_data['Market_Value_Cr'], alpha=0.6)
        ax2.set_xlabel('Yield (%)')
        ax2.set_ylabel('Market Value (₹ Cr)')
        ax2.set_title('Yield vs Market Value', fontsize=12, fontweight='bold')
        
        # Add trend line
        if len(yield_data) > 1:
            z = np.polyfit(yield_data['Yield'], yield_data['Market_Value_Cr'], 1)
            p = np.poly1d(z)
            ax2.plot(yield_data['Yield'], p(yield_data['Yield']), "r--", alpha=0.8)
        
        plt.tight_layout()
        plt.show()
        
        # Yield statistics
        print(f"\n**Yield Statistics:**")
        print(f"• Mean Yield: {yield_data['Yield'].mean():.2f}%")
        print(f"• Median Yield: {yield_data['Yield'].median():.2f}%")
        print(f"• Yield Range: {yield_data['Yield'].min():.2f}% - {yield_data['Yield'].max():.2f}%")
        print(f"• Standard Deviation: {yield_data['Yield'].std():.2f}%")
    else:
        print("No valid yield data available for analysis")
else:
    print("Yield analysis not available")
```

# Risk Assessment

## Portfolio Risk Metrics

```{python}
#| echo: false
#| label: tbl-risk-metrics
#| tbl-cap: "Risk Assessment Summary"

if data_available and len(fund_data) > 0:
    # Calculate risk metrics
    risk_metrics = {}
    
    # Concentration metrics
    if 'Market_Value_Cr' in fund_data.columns:
        # Calculate Herfindahl index for concentration
        market_values = fund_data['Market_Value_Cr']
        total_portfolio = market_values.sum()
        portfolio_weights = market_values / total_portfolio
        herfindahl_index = (portfolio_weights ** 2).sum()
        
        # Top holdings concentration
        top_5_concentration = fund_data.nlargest(5, 'Market_Value_Cr')['Market_Value_Cr'].sum() / total_portfolio * 100
        top_10_concentration = fund_data.nlargest(10, 'Market_Value_Cr')['Market_Value_Cr'].sum() / total_portfolio * 100
        
        risk_metrics['Herfindahl Index'] = f"{herfindahl_index:.4f}"
        risk_metrics['Top 5 Concentration'] = f"{top_5_concentration:.2f}%"
        risk_metrics['Top 10 Concentration'] = f"{top_10_concentration:.2f}%"
    
    # Rating concentration
    if 'Standardized_Rating' in fund_data.columns:
        rating_concentration = fund_data['Standardized_Rating'].value_counts()
        rating_diversity = len(rating_concentration)
        top_rating_pct = (rating_concentration.iloc[0] / len(fund_data)) * 100 if len(rating_concentration) > 0 else 0
        
        risk_metrics['Rating Categories'] = f"{rating_diversity}"
        risk_metrics['Top Rating Concentration'] = f"{top_rating_pct:.1f}%"
    
    # Issuer concentration
    if 'Issuer_Name' in fund_data.columns:
        issuer_count = fund_data['Issuer_Name'].nunique()
        risk_metrics['Unique Issuers'] = f"{issuer_count}"
        
        if 'Market_Value_Cr' in fund_data.columns:
            top_issuer_exposure = fund_data.groupby('Issuer_Name')['Market_Value_Cr'].sum().max() / total_portfolio * 100
            risk_metrics['Largest Issuer Exposure'] = f"{top_issuer_exposure:.2f}%"
    
    # Yield dispersion
    if 'Yield' in fund_data.columns:
        yield_data = fund_data.dropna(subset=['Yield'])
        if len(yield_data) > 0:
            yield_std = yield_data['Yield'].std()
            risk_metrics['Yield Standard Deviation'] = f"{yield_std:.2f}%"
    
    # Create risk metrics table
    if risk_metrics:
        risk_df = pd.DataFrame(list(risk_metrics.items()), columns=['Risk Metric', 'Value'])
        print(risk_df.to_string(index=False))
        
        # Risk assessment
        print(f"\n**Risk Assessment:**")
        
        if 'Herfindahl Index' in risk_metrics:
            hhi = float(risk_metrics['Herfindahl Index'])
            if hhi < 0.10:
                concentration_risk = "LOW"
            elif hhi < 0.25:
                concentration_risk = "MODERATE"
            else:
                concentration_risk = "HIGH"
            print(f"• **Concentration Risk:** {concentration_risk} (HHI: {hhi:.4f})")
        
        if 'Top 10 Concentration' in risk_metrics:
            top_10 = float(risk_metrics['Top 10 Concentration'].rstrip('%'))
            if top_10 < 50:
                holding_concentration = "WELL DIVERSIFIED"
            elif top_10 < 75:
                holding_concentration = "MODERATELY CONCENTRATED"
            else:
                holding_concentration = "HIGHLY CONCENTRATED"
            print(f"• **Holdings Concentration:** {holding_concentration} (Top 10: {top_10:.1f}%)")
        
        if 'Rating Categories' in risk_metrics:
            rating_div = int(risk_metrics['Rating Categories'])
            if rating_div >= 5:
                rating_risk = "WELL DIVERSIFIED"
            elif rating_div >= 3:
                rating_risk = "MODERATELY DIVERSIFIED"
            else:
                rating_risk = "CONCENTRATED"
            print(f"• **Credit Quality Diversification:** {rating_risk} ({rating_div} rating categories)")
    else:
        print("Risk metrics not available")
```

# Data Quality and Coverage

```{python}
#| echo: false
#| label: tbl-data-coverage
#| tbl-cap: "Data Quality Assessment"

if data_available:
    # Assess data completeness
    data_quality = {}
    
    total_records = len(fund_data)
    data_quality['Total Holdings'] = total_records
    
    # Check key field coverage
    key_fields = ['Issuer_Name', 'Market_Value_Cr', 'Yield', 'Standardized_Rating']
    
    for field in key_fields:
        if field in fund_data.columns:
            non_null_count = fund_data[field].notna().sum()
            coverage_pct = (non_null_count / total_records) * 100 if total_records > 0 else 0
            data_quality[f'{field} Coverage'] = f"{non_null_count}/{total_records} ({coverage_pct:.1f}%)"
    
    # Overall data quality score
    coverage_scores = []
    for field in key_fields:
        if field in fund_data.columns:
            coverage = fund_data[field].notna().sum() / total_records if total_records > 0 else 0
            coverage_scores.append(coverage)
    
    overall_quality = np.mean(coverage_scores) * 100 if coverage_scores else 0
    data_quality['Overall Data Quality'] = f"{overall_quality:.1f}%"
    
    # Create data quality table
    quality_df = pd.DataFrame(list(data_quality.items()), columns=['Data Element', 'Coverage'])
    print(quality_df.to_string(index=False))
    
    # Quality assessment
    print(f"\n**Data Quality Status:**")
    if overall_quality >= 95:
        status = "EXCELLENT"
        color = "🟢"
    elif overall_quality >= 85:
        status = "GOOD"
        color = "🟡"
    else:
        status = "NEEDS IMPROVEMENT"
        color = "🔴"
        
    print(f"{color} **{status}** - Overall data quality: {overall_quality:.1f}%")
else:
    print("Data quality assessment not available")
```

# Summary and Recommendations

```{python}
#| echo: false

if data_available and len(fund_data) > 0:
    print("**Fund Analysis Summary:**\n")
    
    # Portfolio characteristics
    print(f"• **Portfolio Size:** ₹{total_aum:,.0f} crores across {total_holdings:,} holdings")
    
    if 'Yield' in fund_data.columns:
        yield_data = fund_data.dropna(subset=['Yield'])
        if len(yield_data) > 0:
            print(f"• **Yield Profile:** Average {avg_yield:.2f}% (Range: {yield_data['Yield'].min():.2f}% - {yield_data['Yield'].max():.2f}%)")
    
    # Rating profile
    if 'Standardized_Rating' in fund_data.columns and len(rating_analysis) > 0:
        top_rating_info = rating_analysis.iloc[0]
        print(f"• **Credit Quality:** {top_rating_info['Standardized_Rating']} securities dominate ({top_rating_info['Percentage']:.1f}% of portfolio)")
    
    # Concentration insights
    if 'Issuer_Name' in fund_data.columns and len(issuer_analysis) > 0:
        top_issuer_info = issuer_analysis.iloc[0]
        print(f"• **Concentration:** Top issuer ({top_issuer_info['Issuer_Name']}) represents {top_issuer_info['Portfolio_Pct']:.2f}% of portfolio")
        
        if len(issuer_analysis) >= 10:
            top_10_total = issuer_analysis.head(10)['Portfolio_Pct'].sum()
            print(f"• **Diversification:** Top 10 issuers account for {top_10_total:.1f}% of total portfolio")
    
    print(f"\n**Investment Considerations:**\n")
    print("• Monitor issuer concentration risk and consider rebalancing if needed")
    print("• Review credit quality distribution for optimal risk-return profile")
    print("• Assess yield opportunities across different rating categories")
    print("• Ensure adequate diversification across sectors and issuers")
    
else:
    print("Summary not available due to insufficient data")
```

---

**Report Generated:** `{python} pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S")` | **Fund Data as of:** `{python} report_date`

*This report is generated from fund portfolio holdings data. All amounts are in Indian Rupees (₹ Crores) unless otherwise specified. Please verify data accuracy and consult with investment professionals for decision making.*
