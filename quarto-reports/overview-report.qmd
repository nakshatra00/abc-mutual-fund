---
title: "Corporate Bond Funds - Portfolio Analysis"
subtitle: "Monthly Portfolio Analysis Report"
author: "Investment Research Team"
date: today
execute:
  echo: false
  warning: false
  message: false
jupyter: python3
---

```{python}
#| echo: false
#| warning: false
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import warnings
warnings.filterwarnings('ignore')

# Set up plotting style
plt.style.use('seaborn-v0_8')
sns.set_palette("Set2")

# Load the prepared data
base_path = Path("/Users/nakshatragupta/Documents/Coding/abc-mutual-fund")
data_path = base_path / "quarto-reports" / "prepared_data"

# Load datasets
overview_data = pd.read_csv(data_path / "overview_metrics.csv")
amc_summary = pd.read_csv(data_path / "amc_summary.csv")
rating_distribution = pd.read_csv(data_path / "rating_distribution.csv")
top_issuers = pd.read_csv(data_path / "top_issuers.csv")
yield_analysis = pd.read_csv(data_path / "yield_analysis.csv")
concentration_metrics = pd.read_csv(data_path / "concentration_metrics.csv")
data_quality = pd.read_csv(data_path / "data_quality_summary.csv")

# Report parameters from command line or defaults
import sys
import os

# Get parameters from environment or use defaults
report_date = os.getenv('QUARTO_REPORT_DATE', '2025-07-31')
min_coverage = int(os.getenv('QUARTO_MIN_COVERAGE', '90'))

print(f"Corporate Bond Funds Analysis - {report_date}")
print("="*60)
```

# Executive Summary {.executive-summary}

This report provides a comprehensive analysis of corporate bond fund portfolios as of **`{python} report_date`**. The analysis covers portfolio composition, credit quality distribution, issuer concentration, and yield characteristics across all participating fund houses.

```{python}
#| echo: false
# Generate key insights
total_funds = len(amc_summary)
total_aum = amc_summary['AUM_Crores'].sum()
avg_yield = overview_data['Weighted_Avg_Yield'].iloc[0] if len(overview_data) > 0 else 0
top_rating = rating_distribution.nlargest(1, 'Percentage')['Rating'].iloc[0] if len(rating_distribution) > 0 else "N/A"

print(f"**Key Highlights:**")
print(f"• **{total_funds}** fund houses analyzed with combined AUM of Rs. {total_aum:,.0f} crores")
print(f"• Portfolio-weighted average yield of **{avg_yield:.2f}%**")
print(f"• **{top_rating}** rated securities dominate portfolio allocation")
print(f"• Data quality coverage: **{data_quality['Coverage_Percentage'].iloc[0]:.1f}%** of holdings successfully analyzed")
```

## Key Performance Indicators

```{python}
#| echo: false
#| fig-width: 10
#| fig-height: 3

# Create KPI visualization
fig, axes = plt.subplots(1, 4, figsize=(12, 3))
fig.suptitle('Portfolio Overview - Key Metrics', fontsize=14, fontweight='bold')

# KPI 1: Total AUM
axes[0].text(0.5, 0.6, f"Rs. {total_aum:,.0f}", ha='center', va='center', 
             fontsize=20, fontweight='bold', color='#1f4e79')
axes[0].text(0.5, 0.3, "Total AUM\n(Rs.  Crores)", ha='center', va='center', 
             fontsize=10, color='#666')
axes[0].set_xlim(0, 1)
axes[0].set_ylim(0, 1)
axes[0].axis('off')

# KPI 2: Average Yield
axes[1].text(0.5, 0.6, f"{avg_yield:.2f}%", ha='center', va='center', 
             fontsize=20, fontweight='bold', color='#2f7d7d')
axes[1].text(0.5, 0.3, "Weighted Avg\nYield", ha='center', va='center', 
             fontsize=10, color='#666')
axes[1].set_xlim(0, 1)
axes[1].set_ylim(0, 1)
axes[1].axis('off')

# KPI 3: Number of Funds
axes[2].text(0.5, 0.6, f"{total_funds}", ha='center', va='center', 
             fontsize=20, fontweight='bold', color='#4f7d4f')
axes[2].text(0.5, 0.3, "Fund Houses\nAnalyzed", ha='center', va='center', 
             fontsize=10, color='#666')
axes[2].set_xlim(0, 1)
axes[2].set_ylim(0, 1)
axes[2].axis('off')

# KPI 4: Data Coverage
coverage = data_quality['Coverage_Percentage'].iloc[0] if len(data_quality) > 0 else 0
axes[3].text(0.5, 0.6, f"{coverage:.1f}%", ha='center', va='center', 
             fontsize=20, fontweight='bold', color='#df8f2f')
axes[3].text(0.5, 0.3, "Data Quality\nCoverage", ha='center', va='center', 
             fontsize=10, color='#666')
axes[3].set_xlim(0, 1)
axes[3].set_ylim(0, 1)
axes[3].axis('off')

plt.tight_layout()
plt.show()
```

# Fund House Analysis

## Assets Under Management by Fund House

```{python}
#| echo: false
#| label: tbl-amc-summary
#| tbl-cap: "Fund House Summary - AUM and Holdings"

# Display AUM summary table
amc_display = amc_summary.copy()
amc_display['AUM_Crores'] = amc_display['AUM_Crores'].apply(lambda x: f"Rs. {x:,.0f}")
amc_display['Avg_Yield'] = amc_display['Avg_Yield'].apply(lambda x: f"{x:.2f}%")
amc_display['Total_Holdings'] = amc_display['Total_Holdings'].apply(lambda x: f"{x:,}")

amc_display = amc_display[['AMC', 'AUM_Crores', 'Total_Holdings', 'Avg_Yield']]
amc_display.columns = ['Fund House', 'Total AUM (Rs.  Cr)', 'Holdings Count', 'Avg Yield (%)']
print(amc_display.to_string(index=False))
```

```{python}
#| echo: false
#| fig-width: 10
#| fig-height: 6
#| label: fig-amc-composition
#| fig-cap: "AUM Distribution Across Fund Houses"

# Create AUM distribution chart
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))

# Pie chart for AUM distribution
amc_summary_sorted = amc_summary.sort_values('AUM_Crores', ascending=False)
colors = plt.cm.Set3(np.linspace(0, 1, len(amc_summary_sorted)))

wedges, texts, autotexts = ax1.pie(amc_summary_sorted['AUM_Crores'], 
                                   labels=amc_summary_sorted['AMC'],
                                   autopct='%1.1f%%',
                                   colors=colors,
                                   startangle=90)
ax1.set_title('AUM Distribution by Fund House', fontsize=12, fontweight='bold')

# Bar chart for yield comparison
ax2.bar(range(len(amc_summary_sorted)), amc_summary_sorted['Avg_Yield'], 
        color=colors)
ax2.set_xlabel('Fund House')
ax2.set_ylabel('Average Yield (%)')
ax2.set_title('Average Yield by Fund House', fontsize=12, fontweight='bold')
ax2.set_xticks(range(len(amc_summary_sorted)))
ax2.set_xticklabels(amc_summary_sorted['AMC'], rotation=45, ha='right')

# Add value labels on bars
for i, v in enumerate(amc_summary_sorted['Avg_Yield']):
    ax2.text(i, v + 0.05, f'{v:.2f}%', ha='center', va='bottom', fontweight='bold')

plt.tight_layout()
plt.show()
```

# Credit Quality Analysis

## Rating Distribution Across All Funds

```{python}
#| echo: false
#| label: tbl-rating-distribution
#| tbl-cap: "Credit Rating Distribution"

# Display rating distribution
rating_agg = rating_distribution.groupby('Rating').agg({
    'Market_Value_Crores': 'sum',
    'Percentage': 'mean',
    'Holdings_Count': 'sum'
}).reset_index()

rating_display = rating_agg.copy()
rating_display['Market_Value_Crores'] = rating_display['Market_Value_Crores'].apply(lambda x: f"Rs. {x:,.0f}")
rating_display['Percentage'] = rating_display['Percentage'].apply(lambda x: f"{x:.1f}%")
rating_display['Holdings_Count'] = rating_display['Holdings_Count'].apply(lambda x: f"{x:,}")

rating_display.columns = ['Credit Rating', 'Amount (Rs.  Cr)', 'Percentage (%)', 'Holdings Count']
print(rating_display.to_string(index=False))
```

```{python}
#| echo: false
#| fig-width: 12
#| fig-height: 8
#| label: fig-rating-analysis
#| fig-cap: "Credit Quality Distribution Analysis"

# Create comprehensive rating analysis
fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(14, 10))

# 1. Rating distribution pie chart
rating_colors = {
    'SOVEREIGN': '#1f4e79',
    'AAA': '#2f5f8f', 
    'AA+': '#3f6f9f',
    'AA': '#3f6f9f',
    'AA-': '#3f6f9f',
    'A+': '#4f7f4f',
    'A': '#4f7f4f',
    'A-': '#4f7f4f',
    'BBB+': '#df8f2f',
    'BBB': '#df8f2f',
    'BBB-': '#df8f2f',
    'OTHER': '#8f8f8f'
}

# Aggregate rating data for overall portfolio view
rating_summary = rating_distribution.groupby('Rating').agg({
    'Market_Value_Crores': 'sum',
    'Percentage': 'mean',
    'Holdings_Count': 'sum'
}).reset_index()

colors = [rating_colors.get(rating, '#8f8f8f') for rating in rating_summary['Rating']]
wedges, texts, autotexts = ax1.pie(rating_summary['Percentage'], 
                                   labels=rating_summary['Rating'],
                                   autopct='%1.1f%%',
                                   colors=colors,
                                   startangle=90)
ax1.set_title('Rating Distribution by Allocation', fontsize=12, fontweight='bold')

# 2. Rating distribution bar chart
bars = ax2.bar(rating_summary['Rating'], rating_summary['Percentage'], 
               color=colors)
ax2.set_xlabel('Credit Rating')
ax2.set_ylabel('Percentage of Portfolio (%)')
ax2.set_title('Portfolio Allocation by Rating', fontsize=12, fontweight='bold')
ax2.tick_params(axis='x', rotation=45)

# Add value labels on bars
for bar, value in zip(bars, rating_summary['Percentage']):
    height = bar.get_height()
    ax2.text(bar.get_x() + bar.get_width()/2., height + 0.5,
             f'{value:.1f}%', ha='center', va='bottom', fontweight='bold')

# 3. Holdings count by rating
ax3.bar(rating_summary['Rating'], rating_summary['Holdings_Count'], 
        color=colors, alpha=0.7)
ax3.set_xlabel('Credit Rating')
ax3.set_ylabel('Number of Holdings')
ax3.set_title('Holdings Count by Rating', fontsize=12, fontweight='bold')
ax3.tick_params(axis='x', rotation=45)

# 4. Average amount per holding by rating
avg_amount = rating_summary['Market_Value_Crores'] / rating_summary['Holdings_Count']
bars4 = ax4.bar(rating_summary['Rating'], avg_amount, color=colors, alpha=0.7)
ax4.set_xlabel('Credit Rating')
ax4.set_ylabel('Average Amount per Holding (Rs.  Cr)')
ax4.set_title('Average Holding Size by Rating', fontsize=12, fontweight='bold')
ax4.tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()
```

# Issuer Concentration Analysis

## Top Issuers Across All Funds

```{python}
#| echo: false
#| label: tbl-top-issuers
#| tbl-cap: "Top 15 Issuers by Total Exposure"

# Display top issuers
top_issuers_display = top_issuers.head(15).copy()
# Create percentage column since it doesn't exist
total_aum = top_issuers_display['Total_Exposure_Crores'].sum()
top_issuers_display['Percentage_of_Total'] = (top_issuers_display['Total_Exposure_Crores'] / total_aum * 100)

top_issuers_display['Total_Exposure_Crores'] = top_issuers_display['Total_Exposure_Crores'].apply(lambda x: f"Rs. {x:,.0f}")
top_issuers_display['Percentage_of_Total'] = top_issuers_display['Percentage_of_Total'].apply(lambda x: f"{x:.2f}%")

top_issuers_display = top_issuers_display[['Issuer', 'Total_Exposure_Crores', 'Percentage_of_Total', 'Holdings_Count']]
top_issuers_display.columns = ['Issuer Name', 'Total Exposure (Rs.  Cr)', '% of Total AUM', 'Holdings Count']
print(top_issuers_display.to_string(index=False))
```

```{python}
#| echo: false
#| fig-width: 12
#| fig-height: 8
#| label: fig-issuer-concentration
#| fig-cap: "Issuer Concentration Analysis"

# Create issuer concentration analysis
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))

# Top 10 issuers bar chart
top_10 = top_issuers.head(10).copy()
# Calculate percentage for each issuer
total_exposure = top_issuers['Total_Exposure_Crores'].sum()
top_10['Percentage'] = (top_10['Total_Exposure_Crores'] / total_exposure * 100)

bars = ax1.barh(range(len(top_10)), top_10['Total_Exposure_Crores'])
ax1.set_yticks(range(len(top_10)))
ax1.set_yticklabels(top_10['Issuer'])
ax1.set_xlabel('Total Exposure (Rs.  Crores)')
ax1.set_title('Top 10 Issuers by Total Exposure', fontsize=12, fontweight='bold')
ax1.invert_yaxis()

# Add value labels
for i, (bar, value, pct) in enumerate(zip(bars, top_10['Total_Exposure_Crores'], top_10['Percentage'])):
    width = bar.get_width()
    ax1.text(width + 50, bar.get_y() + bar.get_height()/2,
             f'Rs. {value:,.0f} ({pct:.1f}%)', ha='left', va='center', fontweight='bold')

# Concentration curve - calculate cumulative percentages
top_issuers_sorted = top_issuers.copy()
top_issuers_sorted['Percentage'] = (top_issuers_sorted['Total_Exposure_Crores'] / total_exposure * 100)
cumulative_pct = top_issuers_sorted['Percentage'].cumsum()
ax2.plot(range(1, len(cumulative_pct) + 1), cumulative_pct, 'b-', linewidth=2, label='Cumulative Exposure')
ax2.axhline(y=50, color='r', linestyle='--', alpha=0.7, label='50% Threshold')
ax2.axhline(y=75, color='orange', linestyle='--', alpha=0.7, label='75% Threshold')
ax2.set_xlabel('Number of Issuers (Ranked by Exposure)')
ax2.set_ylabel('Cumulative Percentage of Total AUM')
ax2.set_title('Issuer Concentration Curve', fontsize=12, fontweight='bold')
ax2.grid(True, alpha=0.3)
ax2.legend()

# Add annotations for key thresholds
top_10_cumulative = cumulative_pct.head(10).iloc[-1]
top_20_cumulative = cumulative_pct.head(20).iloc[-1] if len(cumulative_pct) >= 20 else cumulative_pct.iloc[-1]
ax2.annotate(f'Top 10: {top_10_cumulative:.1f}%', 
             xy=(10, top_10_cumulative), xytext=(15, top_10_cumulative-5),
             arrowprops=dict(arrowstyle='->', color='blue', alpha=0.7),
             fontweight='bold')

plt.tight_layout()
plt.show()
```

# Yield Analysis

## Yield Distribution and Characteristics

```{python}
#| echo: false
#| label: tbl-yield-analysis
#| tbl-cap: "Yield Analysis by Bucket"

if len(yield_analysis) > 0:
    # Aggregate yield analysis across AMCs
    yield_summary = yield_analysis.groupby('Yield_Bucket').agg({
        'Market_Value_Crores': 'sum',
        'Percentage': 'mean',
        'Holdings_Count': 'sum'
    }).reset_index()
    
    yield_display = yield_summary.copy()
    yield_display['Market_Value_Crores'] = yield_display['Market_Value_Crores'].apply(lambda x: f"Rs. {x:,.0f}")
    yield_display['Percentage'] = yield_display['Percentage'].apply(lambda x: f"{x:.1f}%")
    
    yield_display.columns = ['Yield Range', 'Amount (Rs.  Cr)', 'Percentage (%)', 'Holdings Count']
    print(yield_display.to_string(index=False))
else:
    print("Yield analysis data not available")
```

```{python}
#| echo: false
#| fig-width: 10
#| fig-height: 6
#| label: fig-yield-distribution
#| fig-cap: "Yield Distribution Analysis"

if len(yield_analysis) > 0:
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))
    
    # Use aggregated yield data for charts  
    yield_chart_data = yield_analysis.groupby('Yield_Bucket').agg({
        'Market_Value_Crores': 'sum',
        'Percentage': 'mean',
        'Holdings_Count': 'sum'
    }).reset_index()
    
    # Yield bucket distribution
    bars = ax1.bar(yield_chart_data['Yield_Bucket'], yield_chart_data['Percentage'])
    ax1.set_xlabel('Yield Range (%)')
    ax1.set_ylabel('Portfolio Allocation (%)')
    ax1.set_title('Portfolio Distribution by Yield Buckets', fontsize=12, fontweight='bold')
    ax1.tick_params(axis='x', rotation=45)
    
    # Add value labels
    for bar, value in zip(bars, yield_chart_data['Percentage']):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + 0.5,
                 f'{value:.1f}%', ha='center', va='bottom', fontweight='bold')
    
    # Holdings count by yield bucket
    ax2.bar(yield_chart_data['Yield_Bucket'], yield_chart_data['Holdings_Count'], 
            color='orange', alpha=0.7)
    ax2.set_xlabel('Yield Range (%)')
    ax2.set_ylabel('Number of Holdings')
    ax2.set_title('Holdings Count by Yield Buckets', fontsize=12, fontweight='bold')
    ax2.tick_params(axis='x', rotation=45)
    
    plt.tight_layout()
    plt.show()
else:
    print("Yield distribution charts not available due to missing data")
```

# Risk and Concentration Metrics

## Portfolio Concentration Analysis

```{python}
#| echo: false
#| label: tbl-concentration
#| tbl-cap: "Portfolio Concentration Metrics"

if len(concentration_metrics) > 0:
    conc_display = concentration_metrics.copy()
    # Format the concentration metrics appropriately
    print(conc_display.to_string(index=False))
else:
    print("Concentration metrics not available")
```

# Data Quality Assessment

## Data Coverage and Quality Metrics

```{python}
#| echo: false
#| label: tbl-data-quality
#| tbl-cap: "Data Quality Summary"

if len(data_quality) > 0:
    quality_display = data_quality.copy()
    quality_display['Coverage_Percentage'] = quality_display['Coverage_Percentage'].apply(lambda x: f"{x:.1f}%")
    
    print("Data Quality Summary:")
    print("="*50)
    for _, row in quality_display.iterrows():
        print(f"Total Holdings Processed: {row['Total_Holdings']:,}")
        print(f"Successfully Analyzed: {row['Successful_Analysis']:,}")
        print(f"Coverage Percentage: {row['Coverage_Percentage']}")
        print(f"Rating Standardization: {row['Rating_Coverage']:.1f}%")
        
    # Determine data quality status
    coverage = float(quality_display['Coverage_Percentage'].iloc[0].rstrip('%'))
    if coverage >= 95:
        status = "EXCELLENT"
        color = "green"
    elif coverage >= 90:
        status = "GOOD" 
        color = "orange"
    else:
        status = "NEEDS IMPROVEMENT"
        color = "red"
        
    print(f"\n**Data Quality Status: {status}**")
else:
    print("Data quality metrics not available")
```

# Conclusions and Recommendations

## Key Findings

```{python}
#| echo: false

print("**Portfolio Analysis Summary:**\n")

# Generate insights based on the data
if len(rating_distribution) > 0:
    top_rating = rating_distribution.nlargest(1, 'Percentage')
    print(f"• **Credit Quality**: {top_rating['Rating'].iloc[0]} rated securities represent {top_rating['Percentage'].iloc[0]:.1f}% of total portfolio")

if len(top_issuers) > 0:
    top_issuer = top_issuers.iloc[0]
    # Calculate percentage for top issuer
    total_exposure = top_issuers['Total_Exposure_Crores'].sum()
    top_percentage = (top_issuer['Total_Exposure_Crores'] / total_exposure * 100)
    print(f"• **Concentration Risk**: Top issuer ({top_issuer['Issuer']}) accounts for {top_percentage:.2f}% of total AUM")
    
    # Calculate top 10 concentration
    top_10_exposure = top_issuers.head(10)['Total_Exposure_Crores'].sum()
    top_10_concentration = (top_10_exposure / total_exposure * 100)
    print(f"• **Top 10 Concentration**: {top_10_concentration:.1f}% of total portfolio")

if len(amc_summary) > 0:
    yield_range = amc_summary['Avg_Yield'].max() - amc_summary['Avg_Yield'].min()
    print(f"• **Yield Dispersion**: {yield_range:.2f} percentage points difference between highest and lowest yielding funds")

if len(data_quality) > 0:
    coverage = data_quality['Coverage_Percentage'].iloc[0]
    print(f"• **Data Quality**: {coverage:.1f}% coverage ensures reliable analysis")

print(f"\n**Recommendations:**\n")
print("• Monitor concentration risk in top issuers")
print("• Review credit quality distribution for risk-return optimization")
print("• Consider yield pickup opportunities across rating categories")
print("• Maintain diversification across issuers and sectors")
```

---

**Report Generated:** `{python} pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S")` | **Data as of:** `{python} report_date`

*This report is generated automatically from fund portfolio data and should be reviewed for accuracy. All amounts are in Indian Rupees (Rs.  Crores) unless otherwise specified.*
