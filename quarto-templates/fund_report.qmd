---
title: "Fund Portfolio Analysis Report"
subtitle: "Individual Fund Deep Dive"
author: "Portfolio Analytics Team"
date: today
format:
  pdf:
    documentclass: article
    geometry:
      - top=1in
      - bottom=1in
      - left=1in
      - right=1in
    fontsize: 11pt
    colorlinks: true
    fig-cap-location: bottom
    tbl-cap-location: top
    toc: true
    toc-depth: 2
    number-sections: true
    fig-pos: "H"
    tbl-pos: "H"
execute:
  echo: false
  warning: false
  message: false
jupyter: python3
params:
  fund_name: "Sample Fund"
---

```{python}
#| include: false
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from pathlib import Path
import sys

# Set style for professional charts
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (10, 6)
plt.rcParams['font.size'] = 10

# Get fund name from multiple sources (most robust approach)
import os
import sys

# Try multiple ways to get the fund name
FUND_NAME = None

# Method 1: Check for environment variable (set by generate_reports.py)
if 'FUND_NAME' in os.environ:
    FUND_NAME = os.environ['FUND_NAME']
    print(f"📋 Fund name from environment: {FUND_NAME}")

# Method 2: Check if it's defined in locals (from template replacement)
elif 'fund_name' in locals():
    FUND_NAME = fund_name
    print(f"📋 Fund name from locals: {FUND_NAME}")

# Method 3: Check for a temporary file with fund name
elif Path("temp_fund_name.txt").exists():
    with open("temp_fund_name.txt", 'r') as f:
        FUND_NAME = f.read().strip()
    print(f"📋 Fund name from temp file: {FUND_NAME}")

# Method 4: Fallback to default
else:
    FUND_NAME = "ABSLF Corporate Bond Fund"
    print(f"📋 Using default fund name: {FUND_NAME}")

print(f"🔄 Generating report for fund: {FUND_NAME}")

# Load prepared data
data_dir = Path("prepared_data")

# Verify data directory exists
if not data_dir.exists():
    print(f"❌ Error: Data directory not found: {data_dir.absolute()}")
    print("Make sure analysis_engine.py has been run first!")
    raise FileNotFoundError(f"Prepared data directory not found: {data_dir.absolute()}")

try:
    # Load the original consolidated data to filter by fund
    # Look for the CSV in the current directory (same as where QMD is running)
    csv_files = list(Path(".").glob("*Consolidated*.csv"))
    if not csv_files:
        csv_files = list(Path(".").glob("*.csv"))
    
    if csv_files:
        consolidated_df = pd.read_csv(csv_files[0])  # Use the first CSV found
        print(f"📊 Loaded data from: {csv_files[0]}")
    else:
        raise FileNotFoundError("No CSV file found in current directory")

    # Filter for current fund
    fund_data = consolidated_df[consolidated_df['Fund Name'] == FUND_NAME].copy()

    if len(fund_data) == 0:
        available_funds = consolidated_df['Fund Name'].unique()
        print(f"❌ No data found for fund: {FUND_NAME}")
        print(f"Available funds: {', '.join(available_funds)}")
        raise ValueError(f"Fund '{FUND_NAME}' not found in data")

    # Load analysis data
    top_holdings_by_fund = pd.read_csv(data_dir / "top_holdings_by_fund.csv")
    rating_distribution = pd.read_csv(data_dir / "rating_distribution.csv")
    issuer_analysis = pd.read_csv(data_dir / "issuer_analysis.csv")
    yield_analysis = pd.read_csv(data_dir / "yield_analysis.csv")
    maturity_analysis = pd.read_csv(data_dir / "maturity_analysis.csv")
    fund_yields = pd.read_csv(data_dir / "fund_yield_summary.csv")

    # Filter analysis data for current fund
    fund_top_holdings = top_holdings_by_fund[top_holdings_by_fund['Fund Name'] == FUND_NAME]
    fund_ratings = rating_distribution[rating_distribution['Fund'] == FUND_NAME]
    fund_issuers = issuer_analysis[issuer_analysis['Fund'] == FUND_NAME]
    fund_yields_data = yield_analysis[yield_analysis['Fund'] == FUND_NAME]
    fund_maturity = maturity_analysis[maturity_analysis['Fund'] == FUND_NAME]
    fund_summary = fund_yields[fund_yields['Fund'] == FUND_NAME]

    # Calculate fund-specific metrics
    total_value = fund_data['Market Value (Lacs)'].sum()
    total_holdings = len(fund_data)
    avg_yield = fund_summary['Weighted_Avg_Yield'].iloc[0] if len(fund_summary) > 0 else fund_data['Yield'].mean()
    
    print(f"✅ Successfully loaded fund data: {total_holdings} holdings, ₹{total_value:,.0f} Lacs")
    
except FileNotFoundError as e:
    print(f"❌ Required data file not found: {e}")
    raise
except Exception as e:
    print(f"❌ Error loading fund data: {e}")
    raise
```

# Fund Overview

```{python}
#| output: asis
print(f"# {FUND_NAME} - Portfolio Analysis")
print()
print("**Portfolio Summary:**")
print(f"- **Total Holdings:** {total_holdings}")
print(f"- **Portfolio Value:** ₹{total_value:,.0f} Lacs")
print(f"- **Weighted Average Yield:** {avg_yield:.2f}%")
print(f"- **Analysis Date:** {pd.Timestamp.now().strftime('%Y-%m-%d')}")
```

---

# Top Holdings Analysis

## Top 10 Holdings by Value

```{python}
#| tbl-cap: "Top 10 Holdings (Sorted by Market Value)"
if len(fund_top_holdings) > 0:
    top_display = fund_top_holdings.head(10).copy()
    top_display['Market Value (Lacs)'] = top_display['Market Value (Lacs)'].apply(lambda x: f"₹{x:,.0f}")
    top_display['% to NAV'] = top_display['% to NAV'].apply(lambda x: f"{x:.2f}%")
    top_display['Yield'] = top_display['Yield'].apply(lambda x: f"{x:.2f}%" if pd.notna(x) else "N/A")
    
    display_cols = ['Rank', 'Instrument Name', 'Market Value (Lacs)', '% to NAV', 'Yield', 'Standardized Rating']
    top_display_clean = top_display[display_cols]
    top_display_clean.columns = ['#', 'Instrument', 'Market Value', '% NAV', 'Yield', 'Rating']
    
    display(top_display_clean)
else:
    print("No top holdings data available")
```

## Holdings Concentration

```{python}
#| fig-cap: "Portfolio Concentration - Top 15 Holdings"
if len(fund_data) > 0:
    plt.figure(figsize=(12, 8))
    
    # Get top 15 holdings
    top_15 = fund_data.nlargest(15, 'Market Value (Lacs)')
    
    # Create horizontal bar chart
    bars = plt.barh(range(len(top_15)), top_15['Market Value (Lacs)'], 
                   color='lightblue', edgecolor='navy', alpha=0.7)
    
    # Create labels (truncate long names)
    labels = []
    for name in top_15['Instrument Name']:
        if len(str(name)) > 50:
            labels.append(str(name)[:47] + "...")
        else:
            labels.append(str(name))
    
    plt.yticks(range(len(top_15)), labels)
    plt.xlabel('Market Value (₹ Lacs)')
    plt.title(f'Top 15 Holdings - {FUND_NAME}', fontweight='bold', pad=20)
    plt.grid(axis='x', alpha=0.3)
    
    # Add value labels
    for i, v in enumerate(top_15['Market Value (Lacs)']):
        plt.text(v + max(top_15['Market Value (Lacs)']) * 0.02, i, 
                 f'₹{v:,.0f}', va='center', fontsize=9)
    
    plt.tight_layout()
    plt.show()
```

---

# Credit Rating Analysis

## Rating Distribution

```{python}
#| fig-cap: "Credit Rating Distribution"
if len(fund_ratings) > 0:
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Pie chart
    colors = ['#2E8B57', '#4682B4', '#DAA520', '#CD853F', '#DC143C']
    fund_ratings_sorted = fund_ratings.sort_values('Market_Value_Lacs', ascending=False)
    
    wedges, texts, autotexts = ax1.pie(fund_ratings_sorted['Market_Value_Lacs'], 
                                      labels=fund_ratings_sorted['Rating'], 
                                      autopct='%1.1f%%',
                                      colors=colors[:len(fund_ratings_sorted)],
                                      startangle=90)
    ax1.set_title('Rating Distribution by Value', fontweight='bold')
    
    # Bar chart
    bars = ax2.bar(fund_ratings_sorted['Rating'], fund_ratings_sorted['Market_Value_Lacs'],
                  color=colors[:len(fund_ratings_sorted)], alpha=0.7)
    ax2.set_ylabel('Market Value (₹ Lacs)')
    ax2.set_title('Rating Distribution - Values', fontweight='bold')
    ax2.grid(axis='y', alpha=0.3)
    
    # Add value labels on bars
    for bar in bars:
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + height*0.02,
                f'₹{height:,.0f}', ha='center', va='bottom', fontsize=9)
    
    plt.tight_layout()
    plt.show()
else:
    print("No rating distribution data available")
```

## Rating Summary

```{python}
#| tbl-cap: "Credit Rating Breakdown"
if len(fund_ratings) > 0:
    rating_summary = fund_ratings.copy()
    rating_summary['Market_Value_Lacs'] = rating_summary['Market_Value_Lacs'].apply(lambda x: f"₹{x:,.0f}")
    rating_summary['NAV_Percentage'] = rating_summary['NAV_Percentage'].apply(lambda x: f"{x:.1f}%")
    rating_summary = rating_summary.sort_values('Rating')
    rating_summary.columns = ['Fund', 'Rating', 'Market Value', 'NAV %', 'Holdings Count']
    rating_display = rating_summary[['Rating', 'Holdings Count', 'Market Value', 'NAV %']]
    
    display(rating_display)
else:
    print("No rating data available")
```

---

# Issuer Analysis

## Top Issuers in Portfolio

```{python}
#| fig-cap: "Top 10 Issuers by Exposure"
if len(fund_issuers) > 0:
    plt.figure(figsize=(12, 8))
    
    top_issuers_fund = fund_issuers.nlargest(10, 'Market_Value_Lacs')
    
    bars = plt.barh(range(len(top_issuers_fund)), top_issuers_fund['Market_Value_Lacs'],
                   color='lightgreen', edgecolor='darkgreen', alpha=0.7)
    
    plt.yticks(range(len(top_issuers_fund)), top_issuers_fund['Issuer'])
    plt.xlabel('Market Value (₹ Lacs)')
    plt.title(f'Top 10 Issuers - {FUND_NAME}', fontweight='bold', pad=20)
    plt.grid(axis='x', alpha=0.3)
    
    # Add value labels
    for i, v in enumerate(top_issuers_fund['Market_Value_Lacs']):
        plt.text(v + max(top_issuers_fund['Market_Value_Lacs']) * 0.02, i,
                 f'₹{v:,.0f}', va='center', fontsize=9)
    
    plt.tight_layout()
    plt.show()
else:
    print("No issuer data available")
```

## Issuer Concentration Table

```{python}
#| tbl-cap: "Top 15 Issuers Summary"
if len(fund_issuers) > 0:
    issuer_display = fund_issuers.nlargest(15, 'Market_Value_Lacs').copy()
    issuer_display['Market_Value_Lacs'] = issuer_display['Market_Value_Lacs'].apply(lambda x: f"₹{x:,.0f}")
    issuer_display['NAV_Percentage'] = issuer_display['NAV_Percentage'].apply(lambda x: f"{x:.2f}%")
    
    issuer_display = issuer_display[['Issuer', 'Holdings_Count', 'Market_Value_Lacs', 'NAV_Percentage']]
    issuer_display.columns = ['Issuer', 'Holdings', 'Market Value', '% to NAV']
    
    display(issuer_display)
else:
    print("No issuer concentration data available")
```

---

# Yield Analysis

## Yield Distribution

```{python}
#| fig-cap: "Yield Bucket Distribution"
if len(fund_yields_data) > 0:
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Pie chart for yield buckets
    yield_colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7']
    fund_yields_sorted = fund_yields_data.sort_values('Market_Value_Lacs', ascending=False)
    
    wedges, texts, autotexts = ax1.pie(fund_yields_sorted['Market_Value_Lacs'],
                                      labels=fund_yields_sorted['Yield_Bucket'],
                                      autopct='%1.1f%%',
                                      colors=yield_colors[:len(fund_yields_sorted)],
                                      startangle=90)
    ax1.set_title('Yield Distribution by Value', fontweight='bold')
    
    # Bar chart
    bars = ax2.bar(fund_yields_sorted['Yield_Bucket'], fund_yields_sorted['Market_Value_Lacs'],
                  color=yield_colors[:len(fund_yields_sorted)], alpha=0.7)
    ax2.set_ylabel('Market Value (₹ Lacs)')
    ax2.set_title('Yield Buckets - Values', fontweight='bold')
    ax2.tick_params(axis='x', rotation=45)
    ax2.grid(axis='y', alpha=0.3)
    
    # Add value labels
    for bar in bars:
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + height*0.02,
                f'₹{height:,.0f}', ha='center', va='bottom', fontsize=9, rotation=0)
    
    plt.tight_layout()
    plt.show()
else:
    print("No yield distribution data available")
```

## Yield Summary

```{python}
#| tbl-cap: "Yield Bucket Analysis"
if len(fund_yields_data) > 0:
    yield_summary = fund_yields_data.copy()
    yield_summary['Market_Value_Lacs'] = yield_summary['Market_Value_Lacs'].apply(lambda x: f"₹{x:,.0f}")
    yield_summary['NAV_Percentage'] = yield_summary['NAV_Percentage'].apply(lambda x: f"{x:.1f}%")
    
    # Sort by yield bucket order
    bucket_order = ['<5%', '5-6%', '6-7%', '7-8%', '>8%', 'No Yield Info']
    yield_summary['Bucket_Order'] = yield_summary['Yield_Bucket'].map(
        {bucket: i for i, bucket in enumerate(bucket_order)}
    )
    yield_summary = yield_summary.sort_values('Bucket_Order')
    
    yield_display = yield_summary[['Yield_Bucket', 'Holdings_Count', 'Market_Value_Lacs', 'NAV_Percentage']]
    yield_display.columns = ['Yield Bucket', 'Holdings', 'Market Value', '% to NAV']
    
    display(yield_display)
else:
    print("No yield bucket data available")
```

---

# Maturity Analysis

```{python}
#| fig-cap: "Maturity Distribution (Where Available)"
if len(fund_maturity) > 0 and len(fund_maturity[fund_maturity['Maturity_Bucket'] != 'No Maturity Info']) > 0:
    maturity_clean = fund_maturity[fund_maturity['Maturity_Bucket'] != 'No Maturity Info']
    
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Pie chart
    maturity_colors = ['#E74C3C', '#3498DB', '#2ECC71', '#F39C12', '#9B59B6']
    maturity_sorted = maturity_clean.sort_values('Market_Value_Lacs', ascending=False)
    
    wedges, texts, autotexts = ax1.pie(maturity_sorted['Market_Value_Lacs'],
                                      labels=maturity_sorted['Maturity_Bucket'],
                                      autopct='%1.1f%%',
                                      colors=maturity_colors[:len(maturity_sorted)],
                                      startangle=90)
    ax1.set_title('Maturity Distribution by Value', fontweight='bold')
    
    # Bar chart
    bars = ax2.bar(maturity_sorted['Maturity_Bucket'], maturity_sorted['Market_Value_Lacs'],
                  color=maturity_colors[:len(maturity_sorted)], alpha=0.7)
    ax2.set_ylabel('Market Value (₹ Lacs)')
    ax2.set_title('Maturity Buckets - Values', fontweight='bold')
    ax2.tick_params(axis='x', rotation=45)
    ax2.grid(axis='y', alpha=0.3)
    
    # Add value labels
    for bar in bars:
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + height*0.02,
                f'₹{height:,.0f}', ha='center', va='bottom', fontsize=9)
    
    plt.tight_layout()
    plt.show()
    
    # Maturity table
    print("\n## Maturity Bucket Summary\n")
    maturity_summary = maturity_clean.copy()
    maturity_summary['Market_Value_Lacs'] = maturity_summary['Market_Value_Lacs'].apply(lambda x: f"₹{x:,.0f}")
    maturity_summary['NAV_Percentage'] = maturity_summary['NAV_Percentage'].apply(lambda x: f"{x:.1f}%")
    
    maturity_display = maturity_summary[['Maturity_Bucket', 'Holdings_Count', 'Market_Value_Lacs', 'NAV_Percentage']]
    maturity_display.columns = ['Maturity Bucket', 'Holdings', 'Market Value', '% to NAV']
    
    display(maturity_display)
else:
    print("**No detailed maturity information available for this fund**")
    print("\nMaturity data is limited in the current dataset. Where available, it will be displayed above.")
```

---

# Fund Performance Metrics

## Key Performance Indicators

```{python}
#| tbl-cap: "Fund Performance Summary"
# Calculate key metrics for the fund
performance_metrics = []

# Basic metrics
performance_metrics.append(['Total Portfolio Value', f"₹{total_value:,.0f} Lacs"])
performance_metrics.append(['Number of Holdings', f"{total_holdings}"])
performance_metrics.append(['Weighted Average Yield', f"{avg_yield:.2f}%"])

# Rating quality
aaa_holdings = fund_data[fund_data['Standardized Rating'] == 'AAA']
if len(aaa_holdings) > 0:
    aaa_percentage = (aaa_holdings['Market Value (Lacs)'].sum() / total_value) * 100
    performance_metrics.append(['AAA Rated Holdings', f"{aaa_percentage:.1f}%"])

# Concentration metrics
if len(fund_data) >= 10:
    top_10_value = fund_data.nlargest(10, 'Market Value (Lacs)')['% to NAV'].sum()
    performance_metrics.append(['Top 10 Holdings Concentration', f"{top_10_value:.1f}%"])

# Average holding size
avg_holding_size = total_value / total_holdings
performance_metrics.append(['Average Holding Size', f"₹{avg_holding_size:.0f} Lacs"])

# Create dataframe and display
metrics_df = pd.DataFrame(performance_metrics, columns=['Metric', 'Value'])
display(metrics_df)
```

---

```{python}
#| output: asis
report_time = pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')
print(f"*Fund Analysis Generated: {report_time}*")
print()
print(f"*Portfolio Data as of Analysis Date | Total Holdings: {total_holdings} | Total Value: ₹{total_value:,.0f} Lacs*")
```
```

---

```{python}
#| output: asis
report_time = pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')
print(f"*Fund Analysis Generated: {report_time}*")
print()
print(f"*Portfolio Data as of Analysis Date | Total Holdings: {total_holdings} | Total Value: ₹{total_value:,.0f} Lacs*")
```
```

---

```{python}
#| output: asis
report_time = pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')
print(f"*Fund Analysis Generated: {report_time}*")
print()
print(f"*Portfolio Data as of Analysis Date | Total Holdings: {total_holdings} | Total Value: ₹{total_value:,.0f} Lacs*")
```
```

---

```{python}
#| output: asis
report_time = pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')
print(f"*Fund Analysis Generated: {report_time}*")
print()
print(f"*Portfolio Data as of Analysis Date | Total Holdings: {total_holdings} | Total Value: ₹{total_value:,.0f} Lacs*")
```
```

