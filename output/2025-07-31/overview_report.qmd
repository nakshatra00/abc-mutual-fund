---
title: "Mutual Fund Portfolio Analysis - Overview Report"
subtitle: "Cross-Fund Comparative Analysis"
author: "Portfolio Analytics Team"
date: today
format:
  pdf:
    documentclass: article
    geometry:
      - top=1in
      - bottom=1in
      - left=1in
      - right=1in
    fontsize: 11pt
    colorlinks: true
    fig-cap-location: bottom
    tbl-cap-location: top
    toc: true
    toc-depth: 2
    number-sections: true
    fig-pos: "H"
    tbl-pos: "H"
execute:
  echo: false
  warning: false
  message: false
jupyter: python3
---

```{python}
#| include: false
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from pathlib import Path
import json

# Set style for professional charts
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (10, 6)
plt.rcParams['font.size'] = 10

# Load prepared data
data_dir = Path("prepared_data")

# Verify data directory exists
if not data_dir.exists():
    print(f"❌ Error: Data directory not found: {data_dir.absolute()}")
    print("Make sure analysis_engine.py has been run first!")
    raise FileNotFoundError(f"Prepared data directory not found: {data_dir.absolute()}")

try:
    # Load all analysis files
    overview_metrics = pd.read_csv(data_dir / "overview_metrics.csv")
    overall_ratings = pd.read_csv(data_dir / "overall_rating_distribution.csv")
    top_issuers = pd.read_csv(data_dir / "top_issuers.csv")
    fund_yields = pd.read_csv(data_dir / "fund_yield_summary.csv")
    yield_analysis = pd.read_csv(data_dir / "yield_analysis.csv")
    maturity_analysis = pd.read_csv(data_dir / "maturity_analysis.csv")

    # Load summary stats
    with open(data_dir / "analysis_summary.json", 'r') as f:
        summary_stats = json.load(f)
    
    print(f"✅ Successfully loaded data for {len(overview_metrics)} funds")
    
except FileNotFoundError as e:
    print(f"❌ Required data file not found: {e}")
    raise
except Exception as e:
    print(f"❌ Error loading analysis data: {e}")
    raise
```

# Executive Summary

```{python}
#| output: asis
# Calculate summary variables to avoid inline Python syntax issues
num_funds = len(summary_stats['funds_analyzed'])
total_value = summary_stats['total_value_lacs']
total_holdings = summary_stats['total_holdings']
overall_yield = summary_stats['overall_weighted_yield']
analysis_date = summary_stats['analysis_date'][:10]

print(f"This report provides a comprehensive analysis of **{num_funds}** mutual funds with a total portfolio value of **₹{total_value:,.0f} Lacs** across **{total_holdings}** holdings.")
print()
print("**Key Highlights:**")
print(f"- **Overall Weighted Average Yield:** {overall_yield:.2f}%")
print(f"- **Analysis Date:** {analysis_date}")
print(f"- **Funds Analyzed:** {num_funds}")
```

---

# Fund Performance Overview

## Portfolio Size and Yield Comparison

```{python}
#| fig-cap: "Fund Portfolio Sizes and Weighted Average Yields"
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

# Portfolio sizes
fund_yields_sorted = fund_yields.sort_values('Total_Value_Lacs', ascending=True)
bars1 = ax1.barh(fund_yields_sorted['Fund'], fund_yields_sorted['Total_Value_Lacs'], 
                color='skyblue', edgecolor='navy', alpha=0.7)
ax1.set_xlabel('Total Value (₹ Lacs)')
ax1.set_title('Portfolio Sizes by Fund', fontweight='bold')
ax1.grid(axis='x', alpha=0.3)

# Add value labels
for i, v in enumerate(fund_yields_sorted['Total_Value_Lacs']):
    ax1.text(v + max(fund_yields_sorted['Total_Value_Lacs']) * 0.01, i, f'₹{v:,.0f}', 
             va='center', fontsize=9)

# Weighted yields
fund_yields_yield_sorted = fund_yields.sort_values('Weighted_Avg_Yield', ascending=True)
bars2 = ax2.barh(fund_yields_yield_sorted['Fund'], fund_yields_yield_sorted['Weighted_Avg_Yield'], 
                color='lightcoral', edgecolor='darkred', alpha=0.7)
ax2.set_xlabel('Weighted Average Yield (%)')
ax2.set_title('Weighted Average Yields by Fund', fontweight='bold')
ax2.grid(axis='x', alpha=0.3)

# Add yield labels
for i, v in enumerate(fund_yields_yield_sorted['Weighted_Avg_Yield']):
    ax2.text(v + max(fund_yields_yield_sorted['Weighted_Avg_Yield']) * 0.01, i, f'{v:.2f}%', 
             va='center', fontsize=9)

plt.tight_layout()
plt.show()
```

## Fund Metrics Summary

```{python}
#| tbl-cap: "Key Metrics by Fund (Sorted by Portfolio Size)"
# Prepare overview table
overview_display = overview_metrics.copy()
overview_display['Fund_Name'] = overview_display['Fund_Name'].str.replace(' Fund', '').str.replace('Corporate Bond', 'Corp Bond')
overview_display['Total_Value_Lacs'] = overview_display['Total_Value_Lacs'].apply(lambda x: f"₹{x:,.0f}")
overview_display['Weighted_Avg_Yield'] = overview_display['Weighted_Avg_Yield'].apply(lambda x: f"{x:.2f}%")
overview_display['Top_Rating_Pct'] = overview_display['Top_Rating_Pct'].apply(lambda x: f"{x:.1f}%")
overview_display['Top_10_Concentration'] = overview_display['Top_10_Concentration'].apply(lambda x: f"{x:.1f}%")

overview_display = overview_display[['Fund_Name', 'Total_Holdings', 'Total_Value_Lacs', 
                                   'Weighted_Avg_Yield', 'Top_Rating_Pct', 'Top_10_Concentration']]
overview_display.columns = ['Fund', 'Holdings', 'Portfolio Value', 'Yield', 'AAA %', 'Top 10 Conc.']

display(overview_display)
```

---

# Rating Analysis

## Overall Rating Distribution

```{python}
#| fig-cap: "Portfolio Distribution by Credit Rating"
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))

# Rating pie chart
colors = ['#2E8B57', '#4682B4', '#DAA520', '#CD853F', '#DC143C']
wedges, texts, autotexts = ax1.pie(overall_ratings['Market_Value_Lacs'], 
                                  labels=overall_ratings['Rating'], 
                                  autopct='%1.1f%%', 
                                  colors=colors[:len(overall_ratings)],
                                  startangle=90)
ax1.set_title('Rating Distribution by Value', fontweight='bold')

# Rating bar chart
overall_ratings_sorted = overall_ratings.sort_values('Market_Value_Lacs', ascending=True)
bars = ax2.barh(overall_ratings_sorted['Rating'], overall_ratings_sorted['Market_Value_Lacs'],
               color=colors[:len(overall_ratings_sorted)], alpha=0.7)
ax2.set_xlabel('Market Value (₹ Lacs)')
ax2.set_title('Rating Distribution - Market Values', fontweight='bold')
ax2.grid(axis='x', alpha=0.3)

# Add value labels
for i, v in enumerate(overall_ratings_sorted['Market_Value_Lacs']):
    ax2.text(v + max(overall_ratings_sorted['Market_Value_Lacs']) * 0.02, i, 
             f'₹{v:,.0f}', va='center', fontsize=9)

plt.tight_layout()
plt.show()
```

## Rating Summary

```{python}
#| tbl-cap: "Credit Rating Distribution Summary"
rating_summary = overall_ratings.copy()
rating_summary['Market_Value_Lacs'] = rating_summary['Market_Value_Lacs'].apply(lambda x: f"₹{x:,.0f}")
rating_summary['NAV_Percentage'] = rating_summary['NAV_Percentage'].apply(lambda x: f"{x:.1f}%")

rating_summary = rating_summary[['Rating', 'Holdings_Count', 'Market_Value_Lacs', 'NAV_Percentage']]
rating_summary.columns = ['Rating', 'Holdings', 'Market Value', '% of Total']

display(rating_summary)
```

---

# Issuer Concentration Analysis

## Top Issuers Across All Funds

```{python}
#| fig-cap: "Top 10 Issuers by Total Exposure"
plt.figure(figsize=(12, 8))
top_10_issuers = top_issuers.head(10).sort_values('Market_Value_Lacs', ascending=True)

bars = plt.barh(range(len(top_10_issuers)), top_10_issuers['Market_Value_Lacs'], 
               color='lightgreen', edgecolor='darkgreen', alpha=0.7)
plt.yticks(range(len(top_10_issuers)), top_10_issuers['Issuer'])
plt.xlabel('Total Market Value (₹ Lacs)')
plt.title('Top 10 Issuers by Total Portfolio Exposure', fontweight='bold', pad=20)
plt.grid(axis='x', alpha=0.3)

# Add value labels
for i, v in enumerate(top_10_issuers['Market_Value_Lacs']):
    plt.text(v + max(top_10_issuers['Market_Value_Lacs']) * 0.02, i, 
             f'₹{v:,.0f}', va='center', fontsize=9)

plt.tight_layout()
plt.show()
```

## Issuer Concentration Summary

```{python}
#| tbl-cap: "Top 15 Issuers Summary"
issuer_display = top_issuers.copy()
issuer_display['Market_Value_Lacs'] = issuer_display['Market_Value_Lacs'].apply(lambda x: f"₹{x:,.0f}")
total_portfolio = top_issuers['Market_Value_Lacs'].sum()
issuer_display['Portfolio_Pct'] = (top_issuers['Market_Value_Lacs'] / summary_stats['total_value_lacs'] * 100).apply(lambda x: f"{x:.2f}%")
issuer_display = issuer_display[['Issuer', 'Holdings_Count', 'Market_Value_Lacs', 'Portfolio_Pct']]
issuer_display.columns = ['Issuer', 'Holdings', 'Market Value', 'Portfolio %']

display(issuer_display)
```

---

# Yield Analysis

## Yield Distribution Across Funds

```{python}
#| fig-cap: "Yield Bucket Distribution by Fund"
# Prepare yield bucket data for visualization
yield_pivot = yield_analysis.pivot(index='Fund', columns='Yield_Bucket', values='Market_Value_Lacs').fillna(0)

# Define order for yield buckets
bucket_order = ['<5%', '5-6%', '6-7%', '7-8%', '>8%']
existing_buckets = [col for col in bucket_order if col in yield_pivot.columns]
yield_pivot_ordered = yield_pivot[existing_buckets]

# Create stacked bar chart
ax = yield_pivot_ordered.plot(kind='bar', stacked=True, figsize=(12, 6), 
                             colormap='RdYlGn', alpha=0.8)
plt.title('Yield Distribution by Fund (Market Value)', fontweight='bold', pad=20)
plt.xlabel('Fund')
plt.ylabel('Market Value (₹ Lacs)')
plt.xticks(rotation=45)
plt.legend(title='Yield Bucket', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(axis='y', alpha=0.3)
plt.tight_layout()
plt.show()
```

---

# Maturity Analysis (Available Data)

```{python}
#| fig-cap: "Maturity Distribution (Where Available)"
# Filter out 'No Maturity Info' for cleaner visualization
maturity_clean = maturity_analysis[maturity_analysis['Maturity_Bucket'] != 'No Maturity Info']

if len(maturity_clean) > 0:
    plt.figure(figsize=(12, 6))
    
    # Group by fund and maturity bucket
    maturity_pivot = maturity_clean.pivot(index='Fund', columns='Maturity_Bucket', values='Market_Value_Lacs').fillna(0)
    
    # Order maturity buckets logically
    bucket_order = ['0-1 Years', '1-3 Years', '3-5 Years', '5-10 Years', '10+ Years']
    existing_maturity_buckets = [col for col in bucket_order if col in maturity_pivot.columns]
    
    if existing_maturity_buckets:
        maturity_pivot_ordered = maturity_pivot[existing_maturity_buckets]
        
        ax = maturity_pivot_ordered.plot(kind='bar', stacked=True, figsize=(12, 6),
                                       colormap='viridis', alpha=0.8)
        plt.title('Maturity Distribution by Fund (Where Available)', fontweight='bold', pad=20)
        plt.xlabel('Fund')
        plt.ylabel('Market Value (₹ Lacs)')
        plt.xticks(rotation=45)
        plt.legend(title='Maturity Bucket', bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.grid(axis='y', alpha=0.3)
        plt.tight_layout()
        plt.show()
    else:
        print("No maturity data available for visualization")
else:
    print("No detailed maturity information available in the dataset")
```

---

# Risk Metrics Summary

## Portfolio Concentration Risk

```{python}
#| tbl-cap: "Portfolio Concentration Metrics"
concentration_metrics = []
for _, fund in overview_metrics.iterrows():
    concentration_metrics.append({
        'Fund': fund['Fund_Name'].replace(' Fund', '').replace('Corporate Bond', 'Corp Bond'),
        'Top_10_Holdings': f"{fund['Top_10_Concentration']:.1f}%",
        'AAA_Rating': f"{fund['Top_Rating_Pct']:.1f}%",
        'Total_Holdings': fund['Total_Holdings'],
        'Yield': f"{fund['Weighted_Avg_Yield']:.2f}%"
    })

conc_df = pd.DataFrame(concentration_metrics)
conc_df.columns = ['Fund', 'Top 10 Conc.', 'AAA Rating %', 'Total Holdings', 'Avg Yield']
display(conc_df)
```

---

# Key Findings & Recommendations

## Summary Insights

```{python}
#| output: asis
print(f"1. **Yield Performance**: The overall portfolio weighted average yield is **{summary_stats['overall_weighted_yield']:.2f}%**")
print()
print("2. **Credit Quality**: The majority of holdings maintain high credit ratings (AAA/AA category)")
print()
print(f"3. **Diversification**: Portfolio spans across **{len(top_issuers)}** major issuers with varying concentration levels")
print()
print("4. **Maturity Profile**: Where available, the portfolio shows balanced maturity distribution")
```

## Risk Considerations

- **Concentration Risk**: Monitor top issuer exposures for potential concentration risk
- **Credit Risk**: Maintained focus on high-grade instruments minimizes default risk  
- **Interest Rate Risk**: Maturity profile indicates exposure to rate changes

---

```{python}
#| output: asis
report_time = summary_stats['analysis_date'][:19].replace('T', ' ')
print(f"*Report Generated: {report_time}*")
print()
print(f"*Analysis covers {summary_stats['total_holdings']} holdings across {len(summary_stats['funds_analyzed'])} funds*")
```